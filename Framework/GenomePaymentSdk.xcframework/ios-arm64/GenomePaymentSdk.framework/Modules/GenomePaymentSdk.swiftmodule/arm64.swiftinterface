// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GenomePaymentSdk
import CommonCrypto
import Foundation
import Swift
import UIKit
import WebKit
extension Encodable {
  public func pay_encoded() throws -> Foundation.Data
  public var pay_dictionary: [Swift.String : Any?]? {
    get
  }
}
public enum PAYAuthorizationType : Swift.String {
  case signature
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum PAYTransactionType : Swift.String {
  case auth
  case auth3d
  case sale
  case sale3d
  public var intValue: Swift.Int {
    get
  }
  public var is3DSecure: Swift.Bool {
    get
  }
  public init?(number: Swift.Int)
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct PAYAvailableFields {
  public let showBillingAddressLayout: Swift.Bool
  public let showNameField: Swift.Bool
  public let showPhoneField: Swift.Bool
  public let showAddressField: Swift.Bool
  public let showCityField: Swift.Bool
  public let showZipField: Swift.Bool
  public let showCountryField: Swift.Bool
  public let showBirthdayField: Swift.Bool
  public init(isBillingAddressNeeded: Swift.Bool, isNameFieldNeeded: Swift.Bool, isPhoneFieldNeeded: Swift.Bool, isAddressFieldNeeded: Swift.Bool, isCityFieldNeeded: Swift.Bool, isZIPFieldNeeded: Swift.Bool, isCountryFieldNeeded: Swift.Bool, isBirthdayFieldNeeded: Swift.Bool)
}
public enum PAYCOFType : Swift.String {
  case CITInitial
  case CITSubsequent
  case MIT
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class PAYCallback {
  public init(onResponse: @escaping (Swift.Result<GenomePaymentSdk.PAYTransactionResponse, Swift.Error>) -> (), onNeedCalculateSignature: @escaping (GenomePaymentSdk.PAYSignatureInfo, @escaping (Swift.String) -> ()) -> ())
  @objc deinit
}
extension Float {
  public func pay_roundedTo(places: Swift.Int, rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero) -> Swift.Float
}
@objc @_hasMissingDesignatedInitializers final public class PAYPaymentViewController : UIKit.UIViewController {
  public init(initInfo: GenomePaymentSdk.PAYInitInfo, paymentInfo: GenomePaymentSdk.PAYPaymentInfo, callbacks: GenomePaymentSdk.PAYCallback)
  @objc override final public func loadView()
  @objc override final public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public struct PAYPaymentInfo {
  public let transactionType: GenomePaymentSdk.PAYTransactionType
  public let transactionID: Swift.String
  public let amount: Swift.Float
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let address: Swift.String
  public let city: Swift.String
  public let state: Swift.String
  public let zip: Swift.String
  public let country: Swift.String
  public let userPhone: Swift.String
  public let userEmail: Swift.String
  public let auth3dRedirectUrl: Swift.String
  public let sale3dCallBackUrl: Swift.String
  public let sale3dRedirectUrl: Swift.String
  public let currency: Swift.String
  public let birthday: Swift.String
  public init(transactionType: GenomePaymentSdk.PAYTransactionType, transactionID: Swift.String, amount: Swift.Float, firstName: Swift.String, lastName: Swift.String, address: Swift.String, city: Swift.String, state: Swift.String, zip: Swift.String, country: Swift.String, userPhone: Swift.String, userEmail: Swift.String, auth3dRedirectUrl: Swift.String, sale3dCallBackUrl: Swift.String, sale3dRedirectUrl: Swift.String, currency: Swift.String, birthday: Swift.String)
}
public struct PAYTransactionResponse : Swift.Codable {
  public let apiVersion: Swift.Int
  public let merchantAcc: Swift.String?
  public let sessionID: Swift.String
  public let transactionUniqueID: Swift.String?
  public let token: Swift.String?
  public let reference: Swift.String?
  public let timestamp: Swift.Int
  public let authCode: Swift.String?
  public let paymentAuthRequest: Swift.String?
  public let accessControlServer: Swift.String?
  public let eci: Swift.Int?
  public let status: Swift.String
  public let responseCode: Swift.Int
  public let message: Swift.String
  public var error: Foundation.NSError? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case apiVersion
    case merchantAcc
    case sessionID
    case transactionUniqueID
    case token
    case reference
    case timestamp
    case authCode
    case paymentAuthRequest
    case accessControlServer
    case eci
    case status
    case responseCode
    case message
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(apiVersion: Swift.Int, merchantAcc: Swift.String?, sessionID: Swift.String, transactionUniqueID: Swift.String?, token: Swift.String?, reference: Swift.String?, timestamp: Swift.Int, authCode: Swift.String?, paymentAuthRequest: Swift.String?, accessControlServer: Swift.String?, eci: Swift.Int?, status: Swift.String, responseCode: Swift.Int, message: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension String {
  public func pay_sha256() -> Swift.String
}
public struct PAYInitInfo {
  public let apiVersion: Swift.Int
  public let publicKey: Swift.String
  public let theme: GenomePaymentSdk.PAYTheme
  public let fieldsToShow: GenomePaymentSdk.PAYAvailableFields
  public let isProduction: Swift.Bool
  public init(apiVersion: Swift.Int, publicKey: Swift.String, theme: GenomePaymentSdk.PAYTheme, fieldsToShow: GenomePaymentSdk.PAYAvailableFields, isProduction: Swift.Bool)
}
public struct PAYTheme {
  public let backgroundColor: UIKit.UIColor
  public let errorColor: UIKit.UIColor
  public let hyperlinkColor: UIKit.UIColor
  public let headerTitleColor: UIKit.UIColor
  public let headerAmountColor: UIKit.UIColor
  public let headerSeparatorColor: UIKit.UIColor
  public let headerStandardTitleFont: UIKit.UIFont
  public let headerLargeTitleFont: UIKit.UIFont
  public let headerAmountFont: UIKit.UIFont
  public let fieldBackgroundColor: UIKit.UIColor
  public let fieldTitleColor: UIKit.UIColor
  public let fieldTextColor: UIKit.UIColor
  public let fieldPlaceholderColor: UIKit.UIColor
  public let fieldTitleFont: UIKit.UIFont
  public let fieldTextFont: UIKit.UIFont
  public let fieldBackgroundCornerRadius: CoreGraphics.CGFloat
  public let checkmarkColor: UIKit.UIColor
  public let conditionsTextColor: UIKit.UIColor
  public let checkboxCornerRadius: CoreGraphics.CGFloat
  public let conditionsFont: UIKit.UIFont
  public let enabledButtonBackgroundColor: UIKit.UIColor
  public let enabledButtonTitleColor: UIKit.UIColor
  public let disabledButtonBackgroundColor: UIKit.UIColor
  public let disabledButtonTitleColor: UIKit.UIColor
  public let buttonTitleFont: UIKit.UIFont
  public let buttonCornerRadius: CoreGraphics.CGFloat
  public init(backgroundColor: UIKit.UIColor, errorColor: UIKit.UIColor, hyperlinkColor: UIKit.UIColor, headerTitleColor: UIKit.UIColor, headerAmountColor: UIKit.UIColor, headerSeparatorColor: UIKit.UIColor, headerStandardTitleFont: UIKit.UIFont, headerLargeTitleFont: UIKit.UIFont, headerAmountFont: UIKit.UIFont, fieldBackgroundColor: UIKit.UIColor, fieldTitleColor: UIKit.UIColor, fieldTextColor: UIKit.UIColor, fieldPlaceholderColor: UIKit.UIColor, fieldTitleFont: UIKit.UIFont, fieldTextFont: UIKit.UIFont, fieldBackgroundCornerRadius: CoreGraphics.CGFloat, checkmarkColor: UIKit.UIColor, conditionsTextColor: UIKit.UIColor, checkboxCornerRadius: CoreGraphics.CGFloat, conditionsFont: UIKit.UIFont, enabledButtonBackgroundColor: UIKit.UIColor, enabledButtonTitleColor: UIKit.UIColor, disabledButtonBackgroundColor: UIKit.UIColor, disabledButtonTitleColor: UIKit.UIColor, buttonTitleFont: UIKit.UIFont, buttonCornerRadius: CoreGraphics.CGFloat)
}
extension PAYTheme {
  public static var `default`: GenomePaymentSdk.PAYTheme {
    get
  }
}
public struct PAYSignatureInfo : Swift.Codable {
  public let apiVersion: Swift.Int
  public let authType: Swift.String
  public let transactionUniqueID: Swift.String
  public let transactionType: Swift.String
  public let amount: Swift.String
  public let currency: Swift.String
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let address: Swift.String?
  public let city: Swift.String?
  public let state: Swift.String?
  public let zip: Swift.String?
  public let country: Swift.String
  public let phone: Swift.String?
  public let email: Swift.String
  public let ip: Swift.String
  public let callbackURL: Swift.String
  public let redirectURL: Swift.String
  public let birthday: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension PAYSignatureInfo {
  public init(initInfo: GenomePaymentSdk.PAYInitInfo, paymentInfo: GenomePaymentSdk.PAYPaymentInfo)
}
extension GenomePaymentSdk.PAYAuthorizationType : Swift.Equatable {}
extension GenomePaymentSdk.PAYAuthorizationType : Swift.Hashable {}
extension GenomePaymentSdk.PAYAuthorizationType : Swift.RawRepresentable {}
extension GenomePaymentSdk.PAYTransactionType : Swift.Equatable {}
extension GenomePaymentSdk.PAYTransactionType : Swift.Hashable {}
extension GenomePaymentSdk.PAYTransactionType : Swift.RawRepresentable {}
extension GenomePaymentSdk.PAYCOFType : Swift.Equatable {}
extension GenomePaymentSdk.PAYCOFType : Swift.Hashable {}
extension GenomePaymentSdk.PAYCOFType : Swift.RawRepresentable {}
extension GenomePaymentSdk.PAYTransactionResponse.CodingKeys : Swift.Equatable {}
extension GenomePaymentSdk.PAYTransactionResponse.CodingKeys : Swift.Hashable {}
extension GenomePaymentSdk.PAYTransactionResponse.CodingKeys : Swift.RawRepresentable {}
